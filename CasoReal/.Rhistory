# scale_shape_manual(name="Method",values=c(17,19)) +
theme_bw() +
# scale_x_continuous("Specification", breaks=1:length(file), labels=file) +
scale_y_continuous("Estimated effect of being a former British colony or the UK on TI98") +
geom_errorbar(aes(ymin=sup,ymax=inf),width=0.1,position=pd)
ggplot(boot_excel_df, aes(file,mean, color=model)) +
geom_point(aes(shape=model),size=4, position=pd) +
scale_color_manual(name="Method",values=c("coral","steelblue")) +
scale_shape_manual(name="Method",values=c(17,19)) +
theme_bw() +
# scale_x_continuous("Specification", breaks=1:length(file), labels=file) +
scale_y_continuous("Estimated effect of being a former British colony or the UK on TI98") +
geom_errorbar(aes(ymin=sup,ymax=inf),width=0.1,position=pd)
ggplot(boot_excel_df, aes(file,mean, color=model)) +
geom_point(aes(shape=model),size=4, position=pd) +
# scale_color_manual(name="Method",values=c("coral","steelblue")) +
# scale_shape_manual(name="Method",values=c(17,19)) +
theme_bw() +
# scale_x_continuous("Specification", breaks=1:length(file), labels=file) +
scale_y_continuous("Estimated effect of being a former British colony or the UK on TI98") +
geom_errorbar(aes(ymin=sup,ymax=inf),width=0.1)
# Generate DataFrame
sd <- 0.8
cointegration_vector <- c(  1,  rnorm(1, 2, 1),  rnorm(1, 2, 1))
cointegration_vector
y3 <- stats::arima.sim(
list(
order = c(3, 1, 2),
ar = c(0.6, -0.4, -0.3),
ma = c(-0.3, 0.2),
sd = sd),
n = arima_n_obs)
plot.ts(y3)
y2 <- stats::arima.sim(
list(
order = c(3, 1, 2),
ar = c(0.5, -0.3, -0.4),
ma = c(-0.2, -0.25),
sd = sd),
n = arima_n_obs)
plot.ts(y2)
u <- stats::arima.sim(
list(
order = c(1, 0, 0),
sd = sd,
ar = 0.2),
n = (arima_n_obs + 1))
plot.ts(u)
y1 <- u + cointegration_vector[2] * y2 + cointegration_vector[3] * y3
cointegration_vector[2]
y2
cointegration_vector[3]
y1 <- u + cointegration_vector[2] * y2 + cointegration_vector[3] * y3
df <- as.data.frame(scale(cbind(y1, y2, y3))) %>% as.data.table()
library(deply)
library(dplyr)
library(deply)
df <- as.data.frame(scale(cbind(y1, y2, y3))) %>% as.data.table()
library(data.table)
df <- as.data.frame(scale(cbind(y1, y2, y3))) %>% as.data.table()
plot.ts(df)
cor(df)
jotest <- ca.jo(df, type = "eigen")
# Libraries
library(stats)
require(tsDyn)
library(vars)
library(Metrics)
library(data.table)
library(dplyr)
library(progress)
library(urca)
library(tseries)
library(forecast)
library(DescTools)
require(utils)
jotest <- ca.jo(df, type = "eigen")
resultado_coint <- sum(jotest@cval[, 1] < jotest@teststat)
jotest <- ca.jo(df, type = "eigen")
resultado_coint <- sum(jotest@cval[, 1] < jotest@teststat)
resultado_coint
jotest
summary(jotest)
adf.test(df$y1)$p.value <= 0.05 | adf.test(df$y2)$p.value <= 0.05 | adf.test(df$y3)$p.value <= 0.05
(adf.test(diff(df$y1))$p.value > 0.05 | adf.test(diff(df$y2))$p.value > 0.05 | adf.test(diff(df$y3))$p.value > 0.05
adf.test(diff(df$y1))$p.value > 0.05 | adf.test(diff(df$y2))$p.value > 0.05 | adf.test(diff(df$y3))$p.value > 0.05
n <- nrow(df)
fold_time <- floor(n * n_fold_ts)
fold_time
fold_time
train__ <- df[1:fold_time]
train__diff <- df___diff[2:fold_time]
test__ <- df[(fold_time + 1):n]
n_ahead <- nrow(test__)
last_obs_value <- as.numeric(train__[fold_time, "y1"])
n_ahead
# Models
modelo___arima <- forecast::auto.arima(
x = train__$y1, allowdrift = F, method = "ML")
modelo___arima
# Models
modelo___arima <- forecast::auto.arima(
x = train__$y1, allowdrift = F, method = "ML",d = 1)
modelo___arima
jotest
train__$y1
# Models
modelo___arima <- forecast::auto.arima(
x = train__$y1, allowdrift = F, method = "ML",d = 1)
modelo___arima
# Best Model by BIC
BIC_var_list <- list()
BIC_vec_list <- list()
for (order_var in c(1:10)) {
var_i <- vars::VAR(train__diff, p = order_var)
vec_i <- tsDyn::VECM(train__,
lag = order_var, estim = "ML",
include = c("const"), r = 1)
BIC_var_list[[order_var]] <- BIC(var_i)
BIC_vec_list[[order_var]] <- BIC(vec_i)
}
BIC_var_list
var_i
train__diff
train__
var_i <- vars::VAR(train__diff, p = order_var)
train__diff
n <- nrow(df)
fold_time <- floor(n * n_fold_ts)
train__ <- df[1:fold_time]
train__diff <- df___diff[2:fold_time]
test__ <- df[(fold_time + 1):n]
n_ahead <- nrow(test__)
last_obs_value <- as.numeric(train__[fold_time, "y1"])
train__diff
fold_time
df <- as.data.frame(scale(cbind(y1, y2, y3))) %>% as.data.table()
df___diff <- df %>% mutate_each(funs(. - lag(.))) %>% as.data.table()
# Generate DataFrame
sd <- 0.8
cointegration_vector <- c(
1,
rnorm(1, 2, 1),
rnorm(1, 2, 1))
y3 <- stats::arima.sim(
list(
order = c(3, 1, 2),
ar = c(0.6, -0.4, -0.3),
ma = c(-0.3, 0.2),
sd = sd),
n = arima_n_obs)
y2 <- stats::arima.sim(
list(
order = c(3, 1, 2),
ar = c(0.5, -0.3, -0.4),
ma = c(-0.2, -0.25),
sd = sd),
n = arima_n_obs)
u <- stats::arima.sim(
list(
order = c(1, 0, 0),
sd = sd,
ar = 0.2),
n = (arima_n_obs + 1))
y1 <- u + cointegration_vector[2] * y2 + cointegration_vector[3] * y3
df <- as.data.frame(scale(cbind(y1, y2, y3))) %>% as.data.table()
df___diff <- df %>% mutate_each(funs(. - lag(.))) %>% as.data.table()
jotest <- ca.jo(df, type = "eigen")
resultado_coint <- sum(jotest@cval[, 1] < jotest@teststat)
resultado_coint
df___diff
n <- nrow(df)
fold_time <- floor(n * n_fold_ts)
train__ <- df[1:fold_time]
train__diff <- df___diff[2:fold_time]
test__ <- df[(fold_time + 1):n]
n_ahead <- nrow(test__)
last_obs_value <- as.numeric(train__[fold_time, "y1"])
train__diff
# Models
modelo___arima <- forecast::auto.arima(
x = train__$y1, allowdrift = F, method = "ML",d = 1)
modelo___arima
# Best Model by BIC
BIC_var_list <- list()
BIC_vec_list <- list()
for (order_var in c(1:10)) {
var_i <- vars::VAR(train__diff, p = order_var)
vec_i <- tsDyn::VECM(train__,
lag = order_var, estim = "ML",
include = c("const"), r = 1)
BIC_var_list[[order_var]] <- BIC(var_i)
BIC_vec_list[[order_var]] <- BIC(vec_i)
}
BIC_var_list
BIC_vec_list
## Selected order for VAR and VEC
var_order <- which.min(unlist(BIC_var_list))
vec_order <- which.min(unlist(BIC_vec_list))
var_order
vec_order
#VAR
modelo___VAR <- vars::VAR(train__diff, p = var_order)
#VECM
modelo___VEC <- tsDyn::VECM(train__, lag = vec_order, estim = "ML",
include = c("const"), r = 1)
modelo___VAR
modelo___VEC
# Prediction
## ARIMA
modelo___arima_predict <- as.numeric(
predict(modelo___arima, n.ahead = n_ahead)$pred)
## VAR
modelo___VAR_predict_diff <- as.numeric(
predict(modelo___VAR, n.ahead = n_ahead)$fcst$y1[, "fcst"])
modelo___VAR_predict <- last_obs_value + cumsum(modelo___VAR_predict_diff)
last_obs_value
cumsum(modelo___VAR_predict_diff)
last_obs_value + cumsum(modelo___VAR_predict_diff)
## VEC
modelo___VEC_predict <- as.numeric(
predict(modelo___VEC, n.ahead=n_ahead)[, "y1"])
## Consolidated
prediction__df <- as.data.table(
cbind(test__$y1, modelo___arima_predict,
modelo___VAR_predict, modelo___VEC_predict))
prediction__df
prediction__df
plot.ts(prediction__df)
# Obs_Test
y_obs_test <- test__$y1
residuals_ARIMA <- y_obs_test - modelo___arima_predict
residuals_VAR <- y_obs_test - modelo___VAR_predict
residuals_VEC <- y_obs_test - modelo___VEC_predict
diebold_mariano_test_VEC_ARIMA <-  dm.test(residuals_ARIMA, residuals_VEC)
diebold_mariano_test_VEC_VAR <-  dm.test(residuals_VAR, residuals_VEC)
diebold_mariano_test_VAR_ARIMA <- dm.test(residuals_VAR, residuals_ARIMA)
diebold_mariano_list_ARIMA <- append(diebold_mariano_list_ARIMA,
diebold_mariano_test_VEC_ARIMA$p.value)
diebold_mariano_list_VAR <- append(diebold_mariano_list_VAR,
diebold_mariano_test_VEC_VAR$p.value)
diebold_mariano_list_VAR_ARIMA <- append(diebold_mariano_list_VAR_ARIMA,
diebold_mariano_test_VAR_ARIMA$p.value)
#Metrics
## MAE
modelo___arima_predict___MAE <- mae(y_obs_test, modelo___arima_predict)
modelo___VAR_predict___MAE <- mae(y_obs_test, modelo___VAR_predict)
modelo___VEC_predict___MAE <- mae(y_obs_test, modelo___VEC_predict)
resultados <- as.data.frame(
cbind("ARIMA"=modelo___arima_predict___MAE,"VAR"=modelo___VAR_predict___MAE,
"VEC"=modelo___VEC_predict___MAE))
resultados
resultados$BEST_ALL <- as.matrix(apply(
resultados[,c("ARIMA","VAR","VEC")], 1, which.min))
resultados
plot.ts(df$y1, pch = 19,col = "black")
len_train <- train__$y1
lines(c(rep(NA,length(len_train)),modelo___arima_predict),type = "b", pch = 16,col = "blue")
lines(c(rep(NA,length(len_train)),modelo___VAR_predict),type = "b", pch = 17,col = "red")
lines(c(rep(NA,length(len_train)),modelo___VEC_predict),type = "b", pch = 18,col = "green")
legend("topleft",
legend=c("actuals","ARIMA","VAR","VECM"),
col=c("black","blue","red","green"),
lty = 1:2, cex=0.8)
round_metrics = 3
Metrics_Comp <- paste0("ARIMA(",round(modelo___arima_predict___MAE,round_metrics),") | ","VAR(",round(modelo___VAR_predict___MAE,round_metrics),") | ","VEC(",round(modelo___VEC_predict___MAE,3),")")
title(paste("i :",i," |","MAE: ",Metrics_Comp))
# Libraries
library(stats)
require(tsDyn)
library(vars)
library(Metrics)
library(data.table)
library(urca)
library(tseries)
library(forecast)
setwd("C:/Users/thiag/Documents/1 -Mestrado/SprintFinal/CasoReal/")
df <- readxl::read_xlsx("data.xlsx")
head(df)
df__ipca <- readxl::read_xlsx("data.xlsx",sheet = "IPCA")
df__ipca
df__usd <- readxl::read_xlsx("data.xlsx",sheet = "USD")
df__usd
train_start <- "2000-01-01"
train_end <- "2022-02-01"
df__ipca[(df__ipca$date > train_start)|(df__ipca$date > train_end),]
df__ipca[(df__ipca$date > train_start)|(df__ipca$date < train_end),]
train_end
(df__ipca$date < train_end)
df__ipca[(df__ipca$date > train_start) or (df__ipca$date < train_end),]
df__ipca[(df__ipca$date > train_start) || (df__ipca$date < train_end),]
(df__ipca$date > train_start)
df__ipca$date
df__ipca[(df__ipca$date >= train_start) || (df__ipca$date <= train_end),]
df__ipca[(df__ipca$date >= train_start) & (df__ipca$date <= train_end),]
df__ipca__filter = df__ipca[(df__ipca$date >= train_start) & (df__ipca$date <= train_end),]
df__ipca__filter = df__ipca[(df__ipca$date >= train_start) & (df__ipca$date <= train_end),]
df__usd__filter = df__usd[(df__usd$date >= train_start) & (df__usd$date <= train_end),]
df__usd__filter
df__ipca__filter
merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)
df__merge <- merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)
df__merge
View(df__merge)
head(df__merge)
df__merge <- merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)[[selected_colums]]
selected_colums <- c("date","Atual","Price")
df__merge <- merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)[[selected_colums]]
df__merge <- merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)[,selected_colums]
df__merge
df__merge
df__ipca
columns(df__merge)
col(df__merge)
names(df__merge)
names(df__merge) <- c("date","IPCA","USDBRL")
# Libraries
library(stats)
require(tsDyn)
library(vars)
library(Metrics)
library(data.table)
library(urca)
library(tseries)
library(forecast)
setwd("C:/Users/thiag/Documents/1 -Mestrado/SprintFinal/CasoReal/")
df__ipca <- readxl::read_xlsx("data.xlsx",sheet = "IPCA")
df__usd <- readxl::read_xlsx("data.xlsx",sheet = "USD")
selected_colums <- c("date","Atual","Price")
df__merge <- merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)[,selected_colums]
names(df__merge) <- c("date","IPCA","USDBRL")
df__merge
df__train = df__merge[(df__merge$date >= train_start) & (df__merge$date <= train_end),]
df__train
plot.ts(df__train)
as.data.table(df__train)
as.data.frame.ts(df__train)
xts(df__train)
library("xts")
xts(df__train)
xts(df__train[,c("IPCA","USDBRL")],order.by=df__train$date)
df__train_ts <- xts(df__train[,c("IPCA","USDBRL")],order.by=df__train$date)
plot.ts(df__train_ts)
plot.ts(df__train_ts)
as.data.table(df__train_ts)
df__train_ts <- ts(df__train[,c("IPCA","USDBRL")],order.by=df__train$date)
df__train_ts <- xts(df__train[,c("IPCA","USDBRL")],order.by=df__train$date)
df__train_ts
plot(df__train_ts)
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
xlab('data_date') +
ylab('percent.change')
library(ggplot)
library(ggplot2)
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(name = "First Axis",sec.axis = sec_axis(~.*coeff, name="Second Axis")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(name = "First Axis",sec.axis = sec_axis(~.*coeff, name="Second Axis")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(sec.axis= sec_axis(~./2, name="visit_time")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(sec.axis= sec_axis(name="visit_time")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(sec.axis= sec_axis(~./10, name="visit_time")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(sec.axis= sec_axis(~./100, name="visit_time")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue") +
scale_y_continuous(sec.axis= sec_axis(~./0.1, name="visit_time")) +
xlab('data_date') +
ylab('percent.change')
ggplot() +
geom_line(data = df__train, aes(x = date, y = USDBRL), color = "red") +
geom_line(data = df__train, aes(x = date, y = IPCA), color = "blue", aes(y=val*2)) +
scale_y_continuous(sec.axis= sec_axis(~./0.1, name="visit_time")) +
xlab('data_date') +
ylab('percent.change')
library(plotly)
cor(df__train)
cor(df__train_ts)
lm(df__train_ts)
lm(df__train_ts,IPCA~USDBRL)
plot_ly(df__train) %>%
add_lines(x = ~MediaDate, y = ~Spend, yaxis="y1") %>%
add_lines(x = ~MediaDate, y = ~Visits, yaxis = "y2") %>%
layout(yaxis2 = new.y, yaxis = old.y, xaxis = list(title="MediaDate"))
plot_ly(df__train) %>%
add_lines(x = ~date, y = ~IPCA, yaxis="y1") %>%
add_lines(x = ~date, y = ~USDBRL, yaxis = "y2") %>%
layout(yaxis2 = new.y, yaxis = old.y, xaxis = list(title="MediaDate"))
old.y <- list(
side = "left",
title = "Spend"
)
new.y <- list(
overlaying = "y",
side = "right",
title = "Visits"
)
plot_ly(df__train) %>%
add_lines(x = ~date, y = ~IPCA, yaxis="y1") %>%
add_lines(x = ~date, y = ~USDBRL, yaxis = "y2") %>%
layout(yaxis2 = new.y, yaxis = old.y, xaxis = list(title="MediaDate"))
plot_ly(df__train) %>%
add_lines(x = ~date, y = ~IPCA, yaxis="y1") %>%
add_lines(x = ~date, y = ~USDBRL, yaxis = "y2") %>%
layout(yaxis2 = new.y, yaxis = old.y, xaxis = list(title="MediaDate"))
scale_value = max(df__train$IPCA, na.rm = TRUE)/ max(df__train$USDBRL, na.rm = TRUE)
scale_value
ggplot(df__train) +
geom_line(aes(x= date, y= IPCA), color = 'dodgerblue') +
geom_bar(aes(x= date, y = USDBRL*scale_value), stat = 'identity') +
scale_y_continuous(sec.axis = sec_axis(~./scale_value, name = 'NEW'))
ggplot(df__train) +
geom_line(aes(x= date, y= IPCA), color = 'dodgerblue') +
geom_line(aes(x= date, y = USDBRL*scale_value), stat = 'identity') +
scale_y_continuous(sec.axis = sec_axis(~./scale_value, name = 'NEW'))
# Libraries
library(stats)
require(tsDyn)
library(vars)
library(Metrics)
library(data.table)
library(urca)
library(tseries)
library(forecast)
library(plotly)
setwd("C:/Users/thiag/Documents/1 -Mestrado/SprintFinal/CasoReal/")
df__ipca <- readxl::read_xlsx("data.xlsx",sheet = "IPCA")
df__usd <- readxl::read_xlsx("data.xlsx",sheet = "USD")
selected_colums <- c("date","Atual","Price")
df__merge <- merge(x = df__ipca, y = df__usd, by = "date", all.x = TRUE)[,selected_colums]
names(df__merge) <- c("date","IPCA","USDBRL")
pre_filter_start <- "2000-01-01"
pre_filter_end <- "2022-02-01"
df__train = df__merge[(df__merge$date >= pre_filter_start) & (df__merge$date <= pre_filter_end),]
scale_value = max(df__train$IPCA, na.rm = TRUE)/ max(df__train$USDBRL, na.rm = TRUE)
ggplot(df__train) +
geom_line(aes(x= date, y= IPCA), color = 'dodgerblue') +
geom_line(aes(x= date, y = USDBRL*scale_value), stat = 'identity') +
scale_y_continuous(sec.axis = sec_axis(~./scale_value, name = 'NEW'))
ggplot(df__train) +
geom_line(aes(x= date, y= IPCA), color = 'dodgerblue') +
geom_line(aes(x= date, y = USDBRL*scale_value), stat = 'identity') +
scale_y_continuous(sec.axis = sec_axis(~./scale_value, name = 'USD/BRL'))
scale_value = max(df__train$IPCA, na.rm = TRUE)/ max(df__train$USDBRL, na.rm = TRUE)
ggplot(df__train) +
ggplot(df__train) +
geom_line(aes(x= date, y= IPCA), color = 'dodgerblue') +
geom_line(aes(x= date, y = USDBRL*scale_value), stat = 'identity') +
scale_y_continuous(sec.axis = sec_axis(~./scale_value))
ggplot(df__train) +
geom_line(aes(x= date, y= IPCA), color = 'dodgerblue') +
geom_line(aes(x= date, y = USDBRL*scale_value), stat = 'identity') +
scale_y_continuous(sec.axis = sec_axis(~./scale_value)) +
theme(legend.position="top")
scale_value = max(df__train$IPCA, na.rm = TRUE)/ max(df__train$USDBRL, na.rm = TRUE)
plot_ly(df__train) %>%
add_trace(x = ~date, y = ~IPCA,type = "lines",  name = "IPCA") %>%
add_trace(x = ~date, y = ~USDBRL, mode = "lines", yaxis = "y2", name = "USDBRL") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(df__train) %>%
add_trace(x = ~date, y = ~IPCA,type = "lines",  name = "IPCA") %>%
add_trace(x = ~date, y = ~USDBRL, mode = "lines", yaxis = "y2", name = "USDBRL")
plot_ly(df__train) %>%
add_trace(x = ~date, y = ~IPCA,mode = "lines",  name = "IPCA") %>%
add_trace(x = ~date, y = ~USDBRL, mode = "lines", yaxis = "y2", name = "USDBRL") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(df__train) %>%
add_trace(x = ~date, y = ~IPCA,type = "bar",  name = "IPCA") %>%
add_trace(x = ~date, y = ~USDBRL, mode = "lines", yaxis = "y2", name = "USDBRL") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(df__train) %>%
add_trace(x = ~date, y = ~IPCA,type = "bar",  name = "IPCA") %>%
add_trace(x = ~date, y = ~USDBRL, mode = "lines", yaxis = "y2", name = "USDBRL") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
plot_ly(df__train) %>%
add_trace(x = ~date, y = ~IPCA,mode = "lines",  name = "IPCA") %>%
add_trace(x = ~date, y = ~USDBRL, mode = "lines", yaxis = "y2", name = "USDBRL") %>%
layout(yaxis2 = list(overlaying = "y", side = "right"))
